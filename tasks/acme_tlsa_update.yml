---
# Update TLSA records in DNS
#
- name: 'Check required packages'
  ansible.builtin.package:
    name: "{{ dns_packages }}"
    state: 'present'

- name: Gather certificate information'
  community.crypto.x509_certificate_info:
    path: "{{ acme_ssl_basedir }}/{{ certificate.domain }}/{{ certificate.domain }}.cer"
  register: 'cert_info'

- name: "Register TLSA DNS records - {{ certificate.domain }}"
  community.general.nsupdate:
    server: "{{ acme_ssl_nameserver }}"
    ttl: "60"
    type: "TLSA"
    zone: "{{ certificate.dns_zone | default(certificate.domain.split('.')[1:] | join('.')) }}"
    record: "{{ '_' + certificate.tlsa_port | default(acme_ssl_tlsa_default_port) | string + '._tcp' }}.{{ certificate.domain }}"
    value: "{{ acme_ssl_tlsa_trust_config }} 0 1 {{ cert_info['fingerprints']['sha256'] | replace(':', '') }}"
    key_algorithm: "{{ (acme_ssl_tsig_key_algo != '') | ternary(acme_ssl_tsig_key_algo, omit) }}"
    key_name: "{{ (acme_ssl_tsig_key_name != '') | ternary(acme_ssl_tsig_key_name, omit) }}"
    key_secret: "{{ (acme_ssl_tsig_key_secret != '') | ternary(acme_ssl_tsig_key_secret, omit) }}"
    state: 'present'
  register: 'dns_registered'
  retries: 5
  delay: 3
  until: not dns_registered.failed

- name: "Register additional TLSA DNS records - {{ certificate.domain }}"
  community.general.nsupdate:
    server: "{{ acme_ssl_nameserver }}"
    ttl: "60"
    type: "TLSA"
    zone: "{{ certificate.dns_zone | default(altname_record.split('.')[1:] | join('.')) }}"
    record: "{{ '_' + certificate.tlsa_port | default(acme_ssl_tlsa_default_port) | string + '._tcp' }}.{{ altname_record }}"
    value: "{{ acme_ssl_tlsa_trust_config }} 0 1 {{ cert_info['fingerprints']['sha256'] | replace(':', '') }}"
    key_algorithm: "{{ (acme_ssl_tsig_key_algo != '') | ternary(acme_ssl_tsig_key_algo, omit) }}"
    key_name: "{{ (acme_ssl_tsig_key_name != '') | ternary(acme_ssl_tsig_key_name, omit) }}"
    key_secret: "{{ (acme_ssl_tsig_key_secret != '') | ternary(acme_ssl_tsig_key_secret, omit) }}"
    state: 'present'
  register: 'dns_registered'
  retries: 5
  delay: 3
  until: not dns_registered.failed
  loop: "{{ certificate.altname }}"
  loop_control:
    loop_var: 'altname_record'
  when: certificate.altname is defined
