---
# What: Deploy certificate and restart services
#
- name: "Reset failed deployment flag - {{ certificate['domain'] }}"
  ansible.builtin.set_fact:
    acme_deploy_failed: false

- name: "Deploy certificates to target - {{ certificate['domain'] }}"
  block:
    - name: "Ensure ssl-cert group on target - {{ certificate['domain'] }}"
      ansible.builtin.group:
        name: 'ssl-cert'
        state: 'present'
      delegate_to: "{{ certificate['server'] }}"

    - name: 'Create basedir on target'
      ansible.builtin.file:
        path: "{{ acme_ssl_destdir }}"
        state: 'directory'
        mode: '0750'
        group: 'ssl-cert'
      delegate_to: "{{ certificate['server'] }}"

    - name: "Create destdir on target - {{ certificate['domain'] }}"
      ansible.builtin.file:
        path: "{{ acme_ssl_destdir }}/{{ certificate['domain'] }}"
        state: 'directory'
        mode: '0755'  # Allow wider permissions here, protection is done using the parent folder and this allows use in podman containers
        group: 'ssl-cert'
      delegate_to: "{{ certificate['server'] }}"

    - name: "Ensure certificate files on target - {{ certificate['domain'] }}"
      ansible.builtin.copy:
        src: "{{ acme_ssl_basedir }}/{{ certificate['domain'] }}/{{ item }}"
        dest: "{{ acme_ssl_destdir }}/{{ certificate['domain'] }}/{{ item }}"
        mode: '0644'
        owner: 'root'
        group: 'ssl-cert'
      delegate_to: "{{ certificate['server'] }}"
      loop:
        - "{{ certificate['domain'] }}.key"
        - "{{ certificate['domain'] }}.csr"
        - "{{ certificate['domain'] }}.cer"
        - "{{ certificate['domain'] }}_chain.cer"
        - "{{ certificate['domain'] }}_fullchain.cer"
        - 'ca.cer'
        - 'ocsp.cer'
      register: 'deployed_cert'
  rescue:
    - name: "Deploying certificate failed - {{ certificate['domain'] }}"
      ansible.builtin.set_fact:
        acme_deploy_failed: false

- name: 'Restart services'  # noqa key-order
  when:
    - acme_ssl_reload_services | bool
    - not acme_deploy_failed | bool
    - deployed_cert['changed']
  delegate_to: "{{ certificate['server'] }}"
  block:
    - name: 'Determine installed packages'
      ansible.builtin.package_facts:
        manager: 'auto'
      register: 'acme_ssl_destserver_pkgs'

    - name: 'Reload Apache'
      ansible.builtin.service:
        name: "{{ apache_service_name }}"
        state: 'reloaded'
      when: >
        (acme_ssl_destserver_pkgs['ansible_facts']['packages']['httpd'] is defined) or
        (acme_ssl_destserver_pkgs['ansible_facts']['packages']['apache2'] is defined)

    - name: 'Reload nginx'
      ansible.builtin.service:
        name: 'nginx'
        state: 'reloaded'
      when: >
        (acme_ssl_destserver_pkgs['ansible_facts']['packages']['nginx'] is defined) or
        (acme_ssl_destserver_pkgs['ansible_facts']['packages']['nginx-light'] is defined) or
        (acme_ssl_destserver_pkgs['ansible_facts']['packages']['nginx-full'] is defined) or
        (acme_ssl_destserver_pkgs['ansible_facts']['packages']['nginx-extras'] is defined)

    - name: 'Deploy Proxmox Virtual Environment certificate and restart pveproxy'
      when: acme_ssl_destserver_pkgs['ansible_facts']['packages']['pve-manager'] is defined
      block:
        - name: 'Copy certificate files'
          ansible.builtin.copy:
            src: "{{ acme_ssl_basedir }}/{{ certificate['domain'] }}/{{ item['src'] }}"
            dest: "/etc/pve/local/{{ item['dest'] }}"
            owner: 'root'
            group: 'www-data'
            mode: '0640'
          delegate_to: "{{ certificate['server'] }}"
          loop:
            - {src: "{{ certificate['domain'] }}.key", dest: 'pve-ssl.key'}
            - {src: "{{ certificate['domain'] }}_fullchain.cer", dest: 'pve-ssl.pem'}
        - name: 'Restart PVEProxy'
          ansible.builtin.service:
            name: 'pveproxy'
            state: 'restarted'

    - name: 'Deploy Proxmox Backup Server certificate and restart proxmox-backup-proxy'
      when: acme_ssl_destserver_pkgs['ansible_facts']['packages']['proxmox-backup-server'] is defined
      block:
        - name: 'Copy certificate files'
          ansible.builtin.copy:
            src: "{{ acme_ssl_basedir }}/{{ certificate['domain'] }}/{{ item['src'] }}"
            dest: "/etc/proxmox-backup/{{ item['dest'] }}"
            owner: 'root'
            group: 'backup'
            mode: '0640'
          delegate_to: "{{ certificate['server'] }}"
          loop:
            - {src: "{{ certificate['domain'] }}.key", dest: 'proxy.key'}
            - {src: "{{ certificate['domain'] }}_fullchain.cer", dest: 'proxy.pem'}
        - name: 'Restart proxmox-backup-proxy'
          ansible.builtin.service:
            name: 'proxmox-backup-proxy'
            state: 'restarted'

    - name: 'Deploy Proxmox Datacenter Manager Server certificate and restart proxmox-datacenter-api'
      when: acme_ssl_destserver_pkgs['ansible_facts']['packages']['proxmox-datacenter-manager'] is defined
      block:
        - name: 'Copy certificate files'
          ansible.builtin.copy:
            src: "{{ acme_ssl_basedir }}/{{ certificate['domain'] }}/{{ item['src'] }}"
            dest: "/etc/proxmox-datacenter-manager/auth/{{ item['dest'] }}"
            owner: 'root'
            group: 'www-data'
            mode: '0640'
          delegate_to: "{{ certificate['server'] }}"
          loop:
            - {src: "{{ certificate['domain'] }}.key", dest: 'api.key'}
            - {src: "{{ certificate['domain'] }}_fullchain.cer", dest: 'api.pem'}
        - name: 'Restart proxmox-datacenter-api'
          ansible.builtin.service:
            name: 'proxmox-datacenter-api'
            state: 'restarted'

    - name: 'Deploy Zimbra certificate and restart'  # yamllint disable rule:line-length
      when: acme_ssl_destserver_pkgs['ansible_facts']['packages']['zimbra-core'] is defined
      block:
        - name: 'Deploying Zimbra certificate'
          ansible.builtin.shell: |
            cd /etc/ssl/acme/{{ certificate['domain'] }}
            rm fullchain_ca.crt
            cat {{ certificate['domain'] }}_chain.cer ca.cer > fullchain_ca.crt
            chown root:ssl-cert fullchain_ca.crt
            cd /opt/zimbra/ssl/zimbra/commercial
            cp /etc/ssl/acme/{{ certificate['domain'] }}/{{ certificate['domain'] }}.key commercial.key
            sudo -u zimbra /opt/zimbra/bin/zmcertmgr deploycrt comm /etc/ssl/acme/{{ certificate['domain'] }}/{{ certificate['domain'] }}.cer /etc/ssl/acme/{{ certificate['domain'] }}/fullchain_ca.crt
          changed_when: true
        - name: 'Restarting Zimbra'
          ansible.builtin.service:
            name: 'zimbra'
            state: 'restarted'

    - name: 'Restart slapd'  # no-qa no-handler
      ansible.builtin.service:
        name: 'slapd'
        state: 'restarted'
      when: acme_ssl_destserver_pkgs['ansible_facts']['packages']['slapd'] is defined
  rescue:
    - name: "Restarting service failed - {{ certificate['server'] }}"
      ansible.builtin.debug:
        msg: 'Error restarting service! Please investigate!'
